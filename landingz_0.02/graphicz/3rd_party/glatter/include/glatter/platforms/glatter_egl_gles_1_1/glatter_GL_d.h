/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if defined(__gles1_gl_h_)
#if defined(GL_OES_point_size_array)
#ifndef glPointSizePointerOES
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES_debug((type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointSizePointerOES_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_OES_point_size_array)
#if defined(GL_VERSION_ES_CM_1_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glAlphaFunc
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAlphaFunc_debug(GLenum func, GLfloat ref, const char* file, int line);
#ifndef glAlphaFuncx
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx_debug((func), (ref), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAlphaFuncx_debug(GLenum func, GLfixed ref, const char* file, int line);
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#ifndef glClear
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glClearColorx
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColorx_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#ifndef glClearDepthx
#define glClearDepthx(depth) glatter_glClearDepthx_debug((depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthx_debug(GLfixed depth, const char* file, int line);
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#ifndef glClientActiveTexture
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#ifndef glClipPlanef
#define glClipPlanef(p, eqn) glatter_glClipPlanef_debug((p), (eqn), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanef_debug(GLenum p, const GLfloat *eqn, const char* file, int line);
#ifndef glClipPlanex
#define glClipPlanex(plane, equation) glatter_glClipPlanex_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanex_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#ifndef glColor4f
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#ifndef glColor4ub
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#ifndef glColor4x
#define glColor4x(red, green, blue, alpha) glatter_glColor4x_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColor4x_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#ifndef glColorPointer
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#ifndef glDepthRangex
#define glDepthRangex(n, f) glatter_glDepthRangex_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangex_debug(GLfixed n, GLfixed f, const char* file, int line);
#ifndef glDisable
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#ifndef glDisableClientState
#define glDisableClientState(array) glatter_glDisableClientState_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableClientState_debug(GLenum array, const char* file, int line);
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#ifndef glEnable
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#ifndef glEnableClientState
#define glEnableClientState(array) glatter_glEnableClientState_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableClientState_debug(GLenum array, const char* file, int line);
#ifndef glFinish
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinish_debug(const char* file, int line);
#ifndef glFlush
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlush_debug(const char* file, int line);
#ifndef glFogf
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#ifndef glFogfv
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glFogx
#define glFogx(pname, param) glatter_glFogx_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogx_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glFogxv
#define glFogxv(pname, param) glatter_glFogxv_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogxv_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#ifndef glFrustumf
#define glFrustumf(l, r, b, t, n, f) glatter_glFrustumf_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrustumf_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#ifndef glFrustumx
#define glFrustumx(l, r, b, t, n, f) glatter_glFrustumx_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrustumx_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetClipPlanef
#define glGetClipPlanef(plane, equation) glatter_glGetClipPlanef_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetClipPlanef_debug(GLenum plane, GLfloat *equation, const char* file, int line);
#ifndef glGetClipPlanex
#define glGetClipPlanex(plane, equation) glatter_glGetClipPlanex_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetClipPlanex_debug(GLenum plane, GLfixed *equation, const char* file, int line);
#ifndef glGetError
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetError_debug(const char* file, int line);
#ifndef glGetFixedv
#define glGetFixedv(pname, params) glatter_glGetFixedv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFixedv_debug(GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#ifndef glGetLightfv
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetLightxv
#define glGetLightxv(light, pname, params) glatter_glGetLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetLightxv_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetMaterialfv
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetMaterialxv
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv_debug((face), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMaterialxv_debug(GLenum face, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetPointerv
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#ifndef glGetString
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#ifndef glGetTexEnvfv
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexEnvfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexEnviv
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexEnviv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetTexEnvxv
#define glGetTexEnvxv(target, pname, params) glatter_glGetTexEnvxv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexEnvxv_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetTexParameterxv
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterxv_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glHint
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#ifndef glLightModelf
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#ifndef glLightModelfv
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glLightModelx
#define glLightModelx(pname, param) glatter_glLightModelx_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelx_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glLightModelxv
#define glLightModelxv(pname, param) glatter_glLightModelxv_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelxv_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glLightf
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glLightfv
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glLightx
#define glLightx(light, pname, param) glatter_glLightx_debug((light), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightx_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glLightxv
#define glLightxv(light, pname, params) glatter_glLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightxv_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#ifndef glLineWidthx
#define glLineWidthx(width) glatter_glLineWidthx_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidthx_debug(GLfixed width, const char* file, int line);
#ifndef glLoadIdentity
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLoadIdentity_debug(const char* file, int line);
#ifndef glLoadMatrixf
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#ifndef glLoadMatrixx
#define glLoadMatrixx(m) glatter_glLoadMatrixx_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLoadMatrixx_debug(const GLfixed *m, const char* file, int line);
#ifndef glLogicOp
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#ifndef glMaterialf
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glMaterialfv
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glMaterialx
#define glMaterialx(face, pname, param) glatter_glMaterialx_debug((face), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialx_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glMaterialxv
#define glMaterialxv(face, pname, param) glatter_glMaterialxv_debug((face), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialxv_debug(GLenum face, GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glMatrixMode
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#ifndef glMultMatrixf
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#ifndef glMultMatrixx
#define glMultMatrixx(m) glatter_glMultMatrixx_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultMatrixx_debug(const GLfixed *m, const char* file, int line);
#ifndef glMultiTexCoord4f
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#ifndef glMultiTexCoord4x
#define glMultiTexCoord4x(texture, s, t, r, q) glatter_glMultiTexCoord4x_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiTexCoord4x_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#ifndef glNormal3f
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#ifndef glNormal3x
#define glNormal3x(nx, ny, nz) glatter_glNormal3x_debug((nx), (ny), (nz), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNormal3x_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#ifndef glNormalPointer
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glOrthof
#define glOrthof(l, r, b, t, n, f) glatter_glOrthof_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glOrthof_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#ifndef glOrthox
#define glOrthox(l, r, b, t, n, f) glatter_glOrthox_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glOrthox_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#ifndef glPointParameterf
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#ifndef glPointParameterfv
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glPointParameterx
#define glPointParameterx(pname, param) glatter_glPointParameterx_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterx_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glPointParameterxv
#define glPointParameterxv(pname, params) glatter_glPointParameterxv_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glPointSize
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#ifndef glPointSizex
#define glPointSizex(size) glatter_glPointSizex_debug((size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointSizex_debug(GLfixed size, const char* file, int line);
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#ifndef glPolygonOffsetx
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffsetx_debug(GLfixed factor, GLfixed units, const char* file, int line);
#ifndef glPopMatrix
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPopMatrix_debug(const char* file, int line);
#ifndef glPushMatrix
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPushMatrix_debug(const char* file, int line);
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#ifndef glRotatef
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glRotatex
#define glRotatex(angle, x, y, z) glatter_glRotatex_debug((angle), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRotatex_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#ifndef glSampleCoveragex
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoveragex_debug(GLclampx value, GLboolean invert, const char* file, int line);
#ifndef glScalef
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glScalex
#define glScalex(x, y, z) glatter_glScalex_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScalex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glShadeModel
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#ifndef glTexCoordPointer
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glTexEnvf
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexEnvfv
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexEnvi
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexEnviv
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexEnvx
#define glTexEnvx(target, pname, param) glatter_glTexEnvx_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glTexEnvxv
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#ifndef glTexParameterx
#define glTexParameterx(target, pname, param) glatter_glTexParameterx_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glTexParameterxv
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#ifndef glTranslatef
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#ifndef glTranslatex
#define glTranslatex(x, y, z) glatter_glTranslatex_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTranslatex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#ifndef glVertexPointer
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_VERSION_ES_CM_1_0)
#endif // defined(__gles1_gl_h_)
#if defined(__gles1_glext_h_)
#if defined(GL_APPLE_copy_texture_levels)
#ifndef glCopyTextureLevelsAPPLE
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE_debug((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCopyTextureLevelsAPPLE_debug(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount, const char* file, int line);
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleAPPLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glResolveMultisampleFramebufferAPPLE
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glResolveMultisampleFramebufferAPPLE_debug(const char* file, int line);
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#ifndef glClientWaitSyncAPPLE
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glClientWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#ifndef glDeleteSyncAPPLE
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteSyncAPPLE_debug(GLsync sync, const char* file, int line);
#ifndef glFenceSyncAPPLE
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE_debug((condition), (flags), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLsync glatter_glFenceSyncAPPLE_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#ifndef glGetInteger64vAPPLE
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetInteger64vAPPLE_debug(GLenum pname, GLint64 *params, const char* file, int line);
#ifndef glGetSyncivAPPLE
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetSyncivAPPLE_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#ifndef glIsSyncAPPLE
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE_debug((sync), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsSyncAPPLE_debug(GLsync sync, const char* file, int line);
#ifndef glWaitSyncAPPLE
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_debug_marker)
#ifndef glInsertEventMarkerEXT
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#ifndef glPopGroupMarkerEXT
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#ifndef glPushGroupMarkerEXT
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#ifndef glDiscardFramebufferEXT
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDiscardFramebufferEXT_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_map_buffer_range)
#ifndef glFlushMappedBufferRangeEXT
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT_debug((target), (offset), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFlushMappedBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#ifndef glMapBufferRangeEXT
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT_debug((target), (offset), (length), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#ifndef glMultiDrawArraysEXT
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#ifndef glMultiDrawElementsEXT
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DMultisampleEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#ifndef glRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_robustness)
#ifndef glGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glGetGraphicsResetStatusEXT_debug(const char* file, int line);
#ifndef glGetnUniformfvEXT
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformfvEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#ifndef glGetnUniformivEXT
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetnUniformivEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#ifndef glReadnPixelsEXT
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glReadnPixelsEXT_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_texture_storage)
#ifndef glTexStorage1DEXT
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage1DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#ifndef glTexStorage2DEXT
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage2DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTexStorage3DEXT
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexStorage3DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#ifndef glTextureStorage1DEXT
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#ifndef glTextureStorage2DEXT
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#ifndef glTextureStorage3DEXT
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_IMG_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DMultisampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#ifndef glRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageMultisampleIMG_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_IMG_user_clip_plane)
#ifndef glClipPlanefIMG
#define glClipPlanefIMG(p, eqn) glatter_glClipPlanefIMG_debug((p), (eqn), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanefIMG_debug(GLenum p, const GLfloat *eqn, const char* file, int line);
#ifndef glClipPlanexIMG
#define glClipPlanexIMG(p, eqn) glatter_glClipPlanexIMG_debug((p), (eqn), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanexIMG_debug(GLenum p, const GLfixed *eqn, const char* file, int line);
#endif // defined(GL_IMG_user_clip_plane)
#if defined(GL_NV_fence)
#ifndef glDeleteFencesNV
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#ifndef glFinishFenceNV
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#ifndef glGenFencesNV
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#ifndef glGetFenceivNV
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsFenceNV
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#ifndef glSetFenceNV
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#ifndef glTestFenceNV
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_OES_EGL_image)
#ifndef glEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#ifndef glEGLImageTargetTexture2DOES
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_blend_equation_separate)
#ifndef glBlendEquationSeparateOES
#define glBlendEquationSeparateOES(modeRGB, modeAlpha) glatter_glBlendEquationSeparateOES_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationSeparateOES_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#endif // defined(GL_OES_blend_equation_separate)
#if defined(GL_OES_blend_func_separate)
#ifndef glBlendFuncSeparateOES
#define glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateOES_debug((srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendFuncSeparateOES_debug(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#endif // defined(GL_OES_blend_func_separate)
#if defined(GL_OES_blend_subtract)
#ifndef glBlendEquationOES
#define glBlendEquationOES(mode) glatter_glBlendEquationOES_debug((mode), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBlendEquationOES_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_OES_blend_subtract)
#if defined(GL_OES_draw_texture)
#ifndef glDrawTexfOES
#define glDrawTexfOES(x, y, z, width, height) glatter_glDrawTexfOES_debug((x), (y), (z), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexfOES_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height, const char* file, int line);
#ifndef glDrawTexfvOES
#define glDrawTexfvOES(coords) glatter_glDrawTexfvOES_debug((coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexfvOES_debug(const GLfloat *coords, const char* file, int line);
#ifndef glDrawTexiOES
#define glDrawTexiOES(x, y, z, width, height) glatter_glDrawTexiOES_debug((x), (y), (z), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexiOES_debug(GLint x, GLint y, GLint z, GLint width, GLint height, const char* file, int line);
#ifndef glDrawTexivOES
#define glDrawTexivOES(coords) glatter_glDrawTexivOES_debug((coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexivOES_debug(const GLint *coords, const char* file, int line);
#ifndef glDrawTexsOES
#define glDrawTexsOES(x, y, z, width, height) glatter_glDrawTexsOES_debug((x), (y), (z), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexsOES_debug(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height, const char* file, int line);
#ifndef glDrawTexsvOES
#define glDrawTexsvOES(coords) glatter_glDrawTexsvOES_debug((coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexsvOES_debug(const GLshort *coords, const char* file, int line);
#ifndef glDrawTexxOES
#define glDrawTexxOES(x, y, z, width, height) glatter_glDrawTexxOES_debug((x), (y), (z), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexxOES_debug(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height, const char* file, int line);
#ifndef glDrawTexxvOES
#define glDrawTexxvOES(coords) glatter_glDrawTexxvOES_debug((coords), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDrawTexxvOES_debug(const GLfixed *coords, const char* file, int line);
#endif // defined(GL_OES_draw_texture)
#if defined(GL_OES_fixed_point)
#ifndef glAlphaFuncxOES
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES_debug((func), (ref), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glAlphaFuncxOES_debug(GLenum func, GLfixed ref, const char* file, int line);
#ifndef glClearColorxOES
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearColorxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#ifndef glClearDepthxOES
#define glClearDepthxOES(depth) glatter_glClearDepthxOES_debug((depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthxOES_debug(GLfixed depth, const char* file, int line);
#ifndef glClipPlanexOES
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanexOES_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#ifndef glColor4xOES
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glColor4xOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#ifndef glDepthRangexOES
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangexOES_debug(GLfixed n, GLfixed f, const char* file, int line);
#ifndef glFogxOES
#define glFogxOES(pname, param) glatter_glFogxOES_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glFogxvOES
#define glFogxvOES(pname, param) glatter_glFogxvOES_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFogxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glFrustumxOES
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrustumxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#ifndef glGetClipPlanexOES
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetClipPlanexOES_debug(GLenum plane, GLfixed *equation, const char* file, int line);
#ifndef glGetFixedvOES
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFixedvOES_debug(GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetLightxvOES
#define glGetLightxvOES(light, pname, params) glatter_glGetLightxvOES_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetLightxvOES_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetMaterialxvOES
#define glGetMaterialxvOES(face, pname, params) glatter_glGetMaterialxvOES_debug((face), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetMaterialxvOES_debug(GLenum face, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetTexEnvxvOES
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexEnvxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetTexGenxvOES
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexGenxvOES_debug(GLenum coord, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glGetTexParameterxvOES
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#ifndef glLightModelxOES
#define glLightModelxOES(pname, param) glatter_glLightModelxOES_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glLightModelxvOES
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightModelxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glLightxOES
#define glLightxOES(light, pname, param) glatter_glLightxOES_debug((light), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightxOES_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glLightxvOES
#define glLightxvOES(light, pname, params) glatter_glLightxvOES_debug((light), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLightxvOES_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glLineWidthxOES
#define glLineWidthxOES(width) glatter_glLineWidthxOES_debug((width), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLineWidthxOES_debug(GLfixed width, const char* file, int line);
#ifndef glLoadMatrixxOES
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLoadMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#ifndef glMaterialxOES
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES_debug((face), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialxOES_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glMaterialxvOES
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES_debug((face), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMaterialxvOES_debug(GLenum face, GLenum pname, const GLfixed *param, const char* file, int line);
#ifndef glMultMatrixxOES
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES_debug((m), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#ifndef glMultiTexCoord4xOES
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMultiTexCoord4xOES_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#ifndef glNormal3xOES
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES_debug((nx), (ny), (nz), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glNormal3xOES_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#ifndef glOrthoxOES
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glOrthoxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#ifndef glPointParameterxOES
#define glPointParameterxOES(pname, param) glatter_glPointParameterxOES_debug((pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#ifndef glPointParameterxvOES
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES_debug((pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointParameterxvOES_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glPointSizexOES
#define glPointSizexOES(size) glatter_glPointSizexOES_debug((size), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPointSizexOES_debug(GLfixed size, const char* file, int line);
#ifndef glPolygonOffsetxOES
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES_debug((factor), (units), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glPolygonOffsetxOES_debug(GLfixed factor, GLfixed units, const char* file, int line);
#ifndef glRotatexOES
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES_debug((angle), (x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRotatexOES_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#ifndef glSampleCoveragexOES
#define glSampleCoveragexOES(value, invert) glatter_glSampleCoveragexOES_debug((value), (invert), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glSampleCoveragexOES_debug(GLclampx value, GLboolean invert, const char* file, int line);
#ifndef glScalexOES
#define glScalexOES(x, y, z) glatter_glScalexOES_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glScalexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#ifndef glTexEnvxOES
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glTexEnvxvOES
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexEnvxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glTexGenxOES
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES_debug((coord), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGenxOES_debug(GLenum coord, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glTexGenxvOES
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGenxvOES_debug(GLenum coord, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glTexParameterxOES
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#ifndef glTexParameterxvOES
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexParameterxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#ifndef glTranslatexOES
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES_debug((x), (y), (z), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTranslatexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_framebuffer_object)
#ifndef glBindFramebufferOES
#define glBindFramebufferOES(target, framebuffer) glatter_glBindFramebufferOES_debug((target), (framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindFramebufferOES_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#ifndef glBindRenderbufferOES
#define glBindRenderbufferOES(target, renderbuffer) glatter_glBindRenderbufferOES_debug((target), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindRenderbufferOES_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#ifndef glCheckFramebufferStatusOES
#define glCheckFramebufferStatusOES(target) glatter_glCheckFramebufferStatusOES_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLenum glatter_glCheckFramebufferStatusOES_debug(GLenum target, const char* file, int line);
#ifndef glDeleteFramebuffersOES
#define glDeleteFramebuffersOES(n, framebuffers) glatter_glDeleteFramebuffersOES_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteFramebuffersOES_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#ifndef glDeleteRenderbuffersOES
#define glDeleteRenderbuffersOES(n, renderbuffers) glatter_glDeleteRenderbuffersOES_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteRenderbuffersOES_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#ifndef glFramebufferRenderbufferOES
#define glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferOES_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferRenderbufferOES_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#ifndef glFramebufferTexture2DOES
#define glFramebufferTexture2DOES(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DOES_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFramebufferTexture2DOES_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#ifndef glGenFramebuffersOES
#define glGenFramebuffersOES(n, framebuffers) glatter_glGenFramebuffersOES_debug((n), (framebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenFramebuffersOES_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#ifndef glGenRenderbuffersOES
#define glGenRenderbuffersOES(n, renderbuffers) glatter_glGenRenderbuffersOES_debug((n), (renderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenRenderbuffersOES_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#ifndef glGenerateMipmapOES
#define glGenerateMipmapOES(target) glatter_glGenerateMipmapOES_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenerateMipmapOES_debug(GLenum target, const char* file, int line);
#ifndef glGetFramebufferAttachmentParameterivOES
#define glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivOES_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetFramebufferAttachmentParameterivOES_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#ifndef glGetRenderbufferParameterivOES
#define glGetRenderbufferParameterivOES(target, pname, params) glatter_glGetRenderbufferParameterivOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetRenderbufferParameterivOES_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#ifndef glIsFramebufferOES
#define glIsFramebufferOES(framebuffer) glatter_glIsFramebufferOES_debug((framebuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsFramebufferOES_debug(GLuint framebuffer, const char* file, int line);
#ifndef glIsRenderbufferOES
#define glIsRenderbufferOES(renderbuffer) glatter_glIsRenderbufferOES_debug((renderbuffer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsRenderbufferOES_debug(GLuint renderbuffer, const char* file, int line);
#ifndef glRenderbufferStorageOES
#define glRenderbufferStorageOES(target, internalformat, width, height) glatter_glRenderbufferStorageOES_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glRenderbufferStorageOES_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_OES_framebuffer_object)
#if defined(GL_OES_mapbuffer)
#ifndef glGetBufferPointervOES
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES_debug((target), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetBufferPointervOES_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#ifndef glMapBufferOES
#define glMapBufferOES(target, access) glatter_glMapBufferOES_debug((target), (access), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void * glatter_glMapBufferOES_debug(GLenum target, GLenum access, const char* file, int line);
#ifndef glUnmapBufferOES
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES_debug((target), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glUnmapBufferOES_debug(GLenum target, const char* file, int line);
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_matrix_palette)
#ifndef glCurrentPaletteMatrixOES
#define glCurrentPaletteMatrixOES(matrixpaletteindex) glatter_glCurrentPaletteMatrixOES_debug((matrixpaletteindex), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glCurrentPaletteMatrixOES_debug(GLuint matrixpaletteindex, const char* file, int line);
#ifndef glLoadPaletteFromModelViewMatrixOES
#define glLoadPaletteFromModelViewMatrixOES() glatter_glLoadPaletteFromModelViewMatrixOES_debug(__FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glLoadPaletteFromModelViewMatrixOES_debug(const char* file, int line);
#ifndef glMatrixIndexPointerOES
#define glMatrixIndexPointerOES(size, type, stride, pointer) glatter_glMatrixIndexPointerOES_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glMatrixIndexPointerOES_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#ifndef glWeightPointerOES
#define glWeightPointerOES(size, type, stride, pointer) glatter_glWeightPointerOES_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glWeightPointerOES_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_OES_matrix_palette)
#if defined(GL_OES_query_matrix)
#ifndef glQueryMatrixxOES
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES_debug((mantissa), (exponent), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLbitfield glatter_glQueryMatrixxOES_debug(GLfixed *mantissa, GLint *exponent, const char* file, int line);
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#ifndef glClearDepthfOES
#define glClearDepthfOES(depth) glatter_glClearDepthfOES_debug((depth), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClearDepthfOES_debug(GLclampf depth, const char* file, int line);
#ifndef glClipPlanefOES
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glClipPlanefOES_debug(GLenum plane, const GLfloat *equation, const char* file, int line);
#ifndef glDepthRangefOES
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES_debug((n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDepthRangefOES_debug(GLclampf n, GLclampf f, const char* file, int line);
#ifndef glFrustumfOES
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glFrustumfOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#ifndef glGetClipPlanefOES
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetClipPlanefOES_debug(GLenum plane, GLfloat *equation, const char* file, int line);
#ifndef glOrthofOES
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glOrthofOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#endif // defined(GL_OES_single_precision)
#if defined(GL_OES_texture_cube_map)
#ifndef glGetTexGenfvOES
#define glGetTexGenfvOES(coord, pname, params) glatter_glGetTexGenfvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexGenfvOES_debug(GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#ifndef glGetTexGenivOES
#define glGetTexGenivOES(coord, pname, params) glatter_glGetTexGenivOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetTexGenivOES_debug(GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#ifndef glTexGenfOES
#define glTexGenfOES(coord, pname, param) glatter_glTexGenfOES_debug((coord), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGenfOES_debug(GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#ifndef glTexGenfvOES
#define glTexGenfvOES(coord, pname, params) glatter_glTexGenfvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGenfvOES_debug(GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#ifndef glTexGeniOES
#define glTexGeniOES(coord, pname, param) glatter_glTexGeniOES_debug((coord), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGeniOES_debug(GLenum coord, GLenum pname, GLint param, const char* file, int line);
#ifndef glTexGenivOES
#define glTexGenivOES(coord, pname, params) glatter_glTexGenivOES_debug((coord), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glTexGenivOES_debug(GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_OES_texture_cube_map)
#if defined(GL_OES_vertex_array_object)
#ifndef glBindVertexArrayOES
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glBindVertexArrayOES_debug(GLuint array, const char* file, int line);
#ifndef glDeleteVertexArraysOES
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDeleteVertexArraysOES_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#ifndef glGenVertexArraysOES
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGenVertexArraysOES_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#ifndef glIsVertexArrayOES
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES_debug((array), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glIsVertexArrayOES_debug(GLuint array, const char* file, int line);
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_QCOM_driver_control)
#ifndef glDisableDriverControlQCOM
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glDisableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#ifndef glEnableDriverControlQCOM
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEnableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#ifndef glGetDriverControlStringQCOM
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM_debug((driverControl), (bufSize), (length), (driverControlString), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetDriverControlStringQCOM_debug(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString, const char* file, int line);
#ifndef glGetDriverControlsQCOM
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM_debug((num), (size), (driverControls), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glGetDriverControlsQCOM_debug(GLint *num, GLsizei size, GLuint *driverControls, const char* file, int line);
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#ifndef glExtGetBufferPointervQCOM
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM_debug((target), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetBufferPointervQCOM_debug(GLenum target, void **params, const char* file, int line);
#ifndef glExtGetBuffersQCOM
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM_debug((buffers), (maxBuffers), (numBuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetBuffersQCOM_debug(GLuint *buffers, GLint maxBuffers, GLint *numBuffers, const char* file, int line);
#ifndef glExtGetFramebuffersQCOM
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM_debug((framebuffers), (maxFramebuffers), (numFramebuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetFramebuffersQCOM_debug(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers, const char* file, int line);
#ifndef glExtGetRenderbuffersQCOM
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM_debug((renderbuffers), (maxRenderbuffers), (numRenderbuffers), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetRenderbuffersQCOM_debug(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers, const char* file, int line);
#ifndef glExtGetTexLevelParameterivQCOM
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM_debug((texture), (face), (level), (pname), (params), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexLevelParameterivQCOM_debug(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params, const char* file, int line);
#ifndef glExtGetTexSubImageQCOM
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexSubImageQCOM_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels, const char* file, int line);
#ifndef glExtGetTexturesQCOM
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM_debug((textures), (maxTextures), (numTextures), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetTexturesQCOM_debug(GLuint *textures, GLint maxTextures, GLint *numTextures, const char* file, int line);
#ifndef glExtTexObjectStateOverrideiQCOM
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM_debug((target), (pname), (param), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtTexObjectStateOverrideiQCOM_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#ifndef glExtGetProgramBinarySourceQCOM
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM_debug((program), (shadertype), (source), (length), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetProgramBinarySourceQCOM_debug(GLuint program, GLenum shadertype, GLchar *source, GLint *length, const char* file, int line);
#ifndef glExtGetProgramsQCOM
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM_debug((programs), (maxPrograms), (numPrograms), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetProgramsQCOM_debug(GLuint *programs, GLint maxPrograms, GLint *numPrograms, const char* file, int line);
#ifndef glExtGetShadersQCOM
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM_debug((shaders), (maxShaders), (numShaders), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glExtGetShadersQCOM_debug(GLuint *shaders, GLint maxShaders, GLint *numShaders, const char* file, int line);
#ifndef glExtIsProgramBinaryQCOM
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM_debug((program), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT GLboolean glatter_glExtIsProgramBinaryQCOM_debug(GLuint program, const char* file, int line);
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#ifndef glEndTilingQCOM
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM_debug((preserveMask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glEndTilingQCOM_debug(GLbitfield preserveMask, const char* file, int line);
#ifndef glStartTilingQCOM
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM_debug((x), (y), (width), (height), (preserveMask), __FILE__, __LINE__)
#endif
GLATTER_INLINE_OR_NOT void glatter_glStartTilingQCOM_debug(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask, const char* file, int line);
#endif // defined(__gles1_glext_h_)
#endif // defined(GL_QCOM_tiled_rendering)
#endif // GLATTER_GL

