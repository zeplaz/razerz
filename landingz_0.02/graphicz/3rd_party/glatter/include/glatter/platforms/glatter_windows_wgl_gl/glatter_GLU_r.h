/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLU
#if defined(__glu_h__)
#if defined(__GLU_H__)
#ifndef gluBeginCurve
#define gluBeginCurve(nobj) glatter_gluBeginCurve((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluBeginCurve, (GLUnurbs *nobj))
#ifndef gluBeginPolygon
#define gluBeginPolygon(tess) glatter_gluBeginPolygon((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluBeginPolygon, (GLUtesselator *tess))
#ifndef gluBeginSurface
#define gluBeginSurface(nobj) glatter_gluBeginSurface((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluBeginSurface, (GLUnurbs *nobj))
#ifndef gluBeginTrim
#define gluBeginTrim(nobj) glatter_gluBeginTrim((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluBeginTrim, (GLUnurbs *nobj))
#ifndef gluBuild1DMipmaps
#define gluBuild1DMipmaps(target, components, width, format, type, data) glatter_gluBuild1DMipmaps((target), (components), (width), (format), (type), (data))
#endif
GLATTER_UBLOCK(int, APIENTRY, gluBuild1DMipmaps, (GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data))
#ifndef gluBuild2DMipmaps
#define gluBuild2DMipmaps(target, components, width, height, format, type, data) glatter_gluBuild2DMipmaps((target), (components), (width), (height), (format), (type), (data))
#endif
GLATTER_UBLOCK(int, APIENTRY, gluBuild2DMipmaps, (GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data))
#ifndef gluCylinder
#define gluCylinder(qobj, baseRadius, topRadius, height, slices, stacks) glatter_gluCylinder((qobj), (baseRadius), (topRadius), (height), (slices), (stacks))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluCylinder, (GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks))
#ifndef gluDeleteNurbsRenderer
#define gluDeleteNurbsRenderer(nobj) glatter_gluDeleteNurbsRenderer((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluDeleteNurbsRenderer, (GLUnurbs *nobj))
#ifndef gluDeleteQuadric
#define gluDeleteQuadric(state) glatter_gluDeleteQuadric((state))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluDeleteQuadric, (GLUquadric *state))
#ifndef gluDeleteTess
#define gluDeleteTess(tess) glatter_gluDeleteTess((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluDeleteTess, (GLUtesselator *tess))
#ifndef gluDisk
#define gluDisk(qobj, innerRadius, outerRadius, slices, loops) glatter_gluDisk((qobj), (innerRadius), (outerRadius), (slices), (loops))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluDisk, (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops))
#ifndef gluEndCurve
#define gluEndCurve(nobj) glatter_gluEndCurve((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluEndCurve, (GLUnurbs *nobj))
#ifndef gluEndPolygon
#define gluEndPolygon(tess) glatter_gluEndPolygon((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluEndPolygon, (GLUtesselator *tess))
#ifndef gluEndSurface
#define gluEndSurface(nobj) glatter_gluEndSurface((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluEndSurface, (GLUnurbs *nobj))
#ifndef gluEndTrim
#define gluEndTrim(nobj) glatter_gluEndTrim((nobj))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluEndTrim, (GLUnurbs *nobj))
#ifndef gluErrorString
#define gluErrorString(errCode) glatter_gluErrorString((errCode))
#endif
GLATTER_UBLOCK(const GLubyte*, APIENTRY, gluErrorString, (GLenum errCode))
#ifndef gluErrorUnicodeStringEXT
#define gluErrorUnicodeStringEXT(errCode) glatter_gluErrorUnicodeStringEXT((errCode))
#endif
GLATTER_UBLOCK(const wchar_t*, APIENTRY, gluErrorUnicodeStringEXT, (GLenum errCode))
#ifndef gluGetString
#define gluGetString(name) glatter_gluGetString((name))
#endif
GLATTER_UBLOCK(const GLubyte*, APIENTRY, gluGetString, (GLenum name))
#ifndef gluGetTessProperty
#define gluGetTessProperty(tess, which, value) glatter_gluGetTessProperty((tess), (which), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluGetTessProperty, (GLUtesselator *tess, GLenum which, GLdouble *value))
#ifndef gluLookAt
#define gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz) glatter_gluLookAt((eyex), (eyey), (eyez), (centerx), (centery), (centerz), (upx), (upy), (upz))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluLookAt, (GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz))
#ifndef gluNewNurbsRenderer
#define gluNewNurbsRenderer() glatter_gluNewNurbsRenderer()
#endif
GLATTER_UBLOCK(GLUnurbs*, APIENTRY, gluNewNurbsRenderer, (void))
#ifndef gluNewQuadric
#define gluNewQuadric() glatter_gluNewQuadric()
#endif
GLATTER_UBLOCK(GLUquadric*, APIENTRY, gluNewQuadric, (void))
#ifndef gluNewTess
#define gluNewTess() glatter_gluNewTess()
#endif
GLATTER_UBLOCK(GLUtesselator*, APIENTRY, gluNewTess, (void))
#ifndef gluNextContour
#define gluNextContour(tess, type) glatter_gluNextContour((tess), (type))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluNextContour, (GLUtesselator *tess, GLenum type))
#ifndef gluNurbsCurve
#define gluNurbsCurve(nobj, nknots, knot, stride, ctlarray, order, type) glatter_gluNurbsCurve((nobj), (nknots), (knot), (stride), (ctlarray), (order), (type))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluNurbsCurve, (GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type))
#ifndef gluOrtho2D
#define gluOrtho2D(left, right, bottom, top) glatter_gluOrtho2D((left), (right), (bottom), (top))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluOrtho2D, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top))
#ifndef gluPartialDisk
#define gluPartialDisk(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle) glatter_gluPartialDisk((qobj), (innerRadius), (outerRadius), (slices), (loops), (startAngle), (sweepAngle))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluPartialDisk, (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle))
#ifndef gluPerspective
#define gluPerspective(fovy, aspect, zNear, zFar) glatter_gluPerspective((fovy), (aspect), (zNear), (zFar))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluPerspective, (GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar))
#ifndef gluPickMatrix
#define gluPickMatrix(x, y, width, height, viewport) glatter_gluPickMatrix((x), (y), (width), (height), (viewport))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluPickMatrix, (GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4]))
#ifndef gluProject
#define gluProject(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz) glatter_gluProject((objx), (objy), (objz), (modelMatrix), (projMatrix), (viewport), (winx), (winy), (winz))
#endif
GLATTER_UBLOCK(int, APIENTRY, gluProject, (GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz))
#ifndef gluPwlCurve
#define gluPwlCurve(nobj, count, array, stride, type) glatter_gluPwlCurve((nobj), (count), (array), (stride), (type))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluPwlCurve, (GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type))
#ifndef gluQuadricCallback
#define gluQuadricCallback(qobj, which, fn) glatter_gluQuadricCallback((qobj), (which), (fn))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluQuadricCallback, (GLUquadric *qobj, GLenum which, void (CALLBACK* fn)()))
#ifndef gluQuadricDrawStyle
#define gluQuadricDrawStyle(quadObject, drawStyle) glatter_gluQuadricDrawStyle((quadObject), (drawStyle))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluQuadricDrawStyle, (GLUquadric *quadObject, GLenum drawStyle))
#ifndef gluQuadricNormals
#define gluQuadricNormals(quadObject, normals) glatter_gluQuadricNormals((quadObject), (normals))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluQuadricNormals, (GLUquadric *quadObject, GLenum normals))
#ifndef gluQuadricOrientation
#define gluQuadricOrientation(quadObject, orientation) glatter_gluQuadricOrientation((quadObject), (orientation))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluQuadricOrientation, (GLUquadric *quadObject, GLenum orientation))
#ifndef gluQuadricTexture
#define gluQuadricTexture(quadObject, textureCoords) glatter_gluQuadricTexture((quadObject), (textureCoords))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluQuadricTexture, (GLUquadric *quadObject, GLboolean textureCoords))
#ifndef gluScaleImage
#define gluScaleImage(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout) glatter_gluScaleImage((format), (widthin), (heightin), (typein), (datain), (widthout), (heightout), (typeout), (dataout))
#endif
GLATTER_UBLOCK(int, APIENTRY, gluScaleImage, (GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout))
#ifndef gluSphere
#define gluSphere(qobj, radius, slices, stacks) glatter_gluSphere((qobj), (radius), (slices), (stacks))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluSphere, (GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks))
#ifndef gluTessBeginContour
#define gluTessBeginContour(tess) glatter_gluTessBeginContour((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessBeginContour, (GLUtesselator *tess))
#ifndef gluTessBeginPolygon
#define gluTessBeginPolygon(tess, polygon_data) glatter_gluTessBeginPolygon((tess), (polygon_data))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessBeginPolygon, (GLUtesselator *tess, void *polygon_data))
#ifndef gluTessCallback
#define gluTessCallback(tess, which, fn) glatter_gluTessCallback((tess), (which), (fn))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessCallback, (GLUtesselator *tess, GLenum which, void (CALLBACK *fn)()))
#ifndef gluTessEndContour
#define gluTessEndContour(tess) glatter_gluTessEndContour((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessEndContour, (GLUtesselator *tess))
#ifndef gluTessEndPolygon
#define gluTessEndPolygon(tess) glatter_gluTessEndPolygon((tess))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessEndPolygon, (GLUtesselator *tess))
#ifndef gluTessNormal
#define gluTessNormal(tess, x, y, z) glatter_gluTessNormal((tess), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessNormal, (GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z))
#ifndef gluTessProperty
#define gluTessProperty(tess, which, value) glatter_gluTessProperty((tess), (which), (value))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessProperty, (GLUtesselator *tess, GLenum which, GLdouble value))
#ifndef gluTessVertex
#define gluTessVertex(tess, coords, data) glatter_gluTessVertex((tess), (coords), (data))
#endif
GLATTER_UBLOCK(void, APIENTRY, gluTessVertex, (GLUtesselator *tess, GLdouble coords[3], void *data))
#ifndef gluUnProject
#define gluUnProject(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz) glatter_gluUnProject((winx), (winy), (winz), (modelMatrix), (projMatrix), (viewport), (objx), (objy), (objz))
#endif
GLATTER_UBLOCK(int, APIENTRY, gluUnProject, (GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz))
#endif // defined(__glu_h__)
#endif // defined(__GLU_H__)
#endif // GLATTER_GLU

