/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if defined(__gles1_gl_h_)
#if defined(GL_OES_point_size_array)
#ifndef glPointSizePointerOES
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizePointerOES, (GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_OES_point_size_array)
#if defined(GL_VERSION_ES_CM_1_0)
#ifndef glActiveTexture
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#ifndef glAlphaFunc
#define glAlphaFunc(func, ref) glatter_glAlphaFunc((func), (ref))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFunc, (GLenum func, GLfloat ref))
#ifndef glAlphaFuncx
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx((func), (ref))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncx, (GLenum func, GLfixed ref))
#ifndef glBindBuffer
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#ifndef glBindTexture
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#ifndef glBlendFunc
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#ifndef glBufferData
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#ifndef glBufferSubData
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#ifndef glClear
#define glClear(mask) glatter_glClear((mask))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#ifndef glClearColor
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#ifndef glClearColorx
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColorx, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glClearDepthf
#define glClearDepthf(d) glatter_glClearDepthf((d))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#ifndef glClearDepthx
#define glClearDepthx(depth) glatter_glClearDepthx((depth))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthx, (GLfixed depth))
#ifndef glClearStencil
#define glClearStencil(s) glatter_glClearStencil((s))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#ifndef glClientActiveTexture
#define glClientActiveTexture(texture) glatter_glClientActiveTexture((texture))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClientActiveTexture, (GLenum texture))
#ifndef glClipPlanef
#define glClipPlanef(p, eqn) glatter_glClipPlanef((p), (eqn))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanef, (GLenum p, const GLfloat *eqn))
#ifndef glClipPlanex
#define glClipPlanex(plane, equation) glatter_glClipPlanex((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanex, (GLenum plane, const GLfixed *equation))
#ifndef glColor4f
#define glColor4f(red, green, blue, alpha) glatter_glColor4f((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#ifndef glColor4ub
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#ifndef glColor4x
#define glColor4x(red, green, blue, alpha) glatter_glColor4x((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4x, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glColorMask
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#ifndef glColorPointer
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glCompressedTexImage2D
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#ifndef glCompressedTexSubImage2D
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#ifndef glCopyTexImage2D
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#ifndef glCopyTexSubImage2D
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glCullFace
#define glCullFace(mode) glatter_glCullFace((mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#ifndef glDeleteBuffers
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#ifndef glDeleteTextures
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#ifndef glDepthFunc
#define glDepthFunc(func) glatter_glDepthFunc((func))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#ifndef glDepthMask
#define glDepthMask(flag) glatter_glDepthMask((flag))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#ifndef glDepthRangef
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#ifndef glDepthRangex
#define glDepthRangex(n, f) glatter_glDepthRangex((n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangex, (GLfixed n, GLfixed f))
#ifndef glDisable
#define glDisable(cap) glatter_glDisable((cap))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#ifndef glDisableClientState
#define glDisableClientState(array) glatter_glDisableClientState((array))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableClientState, (GLenum array))
#ifndef glDrawArrays
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#ifndef glDrawElements
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#ifndef glEnable
#define glEnable(cap) glatter_glEnable((cap))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#ifndef glEnableClientState
#define glEnableClientState(array) glatter_glEnableClientState((array))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableClientState, (GLenum array))
#ifndef glFinish
#define glFinish() glatter_glFinish()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#ifndef glFlush
#define glFlush() glatter_glFlush()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#ifndef glFogf
#define glFogf(pname, param) glatter_glFogf((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogf, (GLenum pname, GLfloat param))
#ifndef glFogfv
#define glFogfv(pname, params) glatter_glFogfv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#ifndef glFogx
#define glFogx(pname, param) glatter_glFogx((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogx, (GLenum pname, GLfixed param))
#ifndef glFogxv
#define glFogxv(pname, param) glatter_glFogxv((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogxv, (GLenum pname, const GLfixed *param))
#ifndef glFrontFace
#define glFrontFace(mode) glatter_glFrontFace((mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#ifndef glFrustumf
#define glFrustumf(l, r, b, t, n, f) glatter_glFrustumf((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumf, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#ifndef glFrustumx
#define glFrustumx(l, r, b, t, n, f) glatter_glFrustumx((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumx, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glGenBuffers
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#ifndef glGenTextures
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#ifndef glGetBooleanv
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#ifndef glGetBufferParameteriv
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetClipPlanef
#define glGetClipPlanef(plane, equation) glatter_glGetClipPlanef((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanef, (GLenum plane, GLfloat *equation))
#ifndef glGetClipPlanex
#define glGetClipPlanex(plane, equation) glatter_glGetClipPlanex((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanex, (GLenum plane, GLfixed *equation))
#ifndef glGetError
#define glGetError() glatter_glGetError()
#endif
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#ifndef glGetFixedv
#define glGetFixedv(pname, params) glatter_glGetFixedv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFixedv, (GLenum pname, GLfixed *params))
#ifndef glGetFloatv
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#ifndef glGetIntegerv
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#ifndef glGetLightfv
#define glGetLightfv(light, pname, params) glatter_glGetLightfv((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#ifndef glGetLightxv
#define glGetLightxv(light, pname, params) glatter_glGetLightxv((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightxv, (GLenum light, GLenum pname, GLfixed *params))
#ifndef glGetMaterialfv
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#ifndef glGetMaterialxv
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialxv, (GLenum face, GLenum pname, GLfixed *params))
#ifndef glGetPointerv
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointerv, (GLenum pname, void **params))
#ifndef glGetString
#define glGetString(name) glatter_glGetString((name))
#endif
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#ifndef glGetTexEnvfv
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetTexEnviv
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnviv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetTexEnvxv
#define glGetTexEnvxv(target, pname, params) glatter_glGetTexEnvxv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvxv, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glGetTexParameterfv
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#ifndef glGetTexParameteriv
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#ifndef glGetTexParameterxv
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterxv, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glHint
#define glHint(target, mode) glatter_glHint((target), (mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#ifndef glIsBuffer
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#ifndef glIsEnabled
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#ifndef glIsTexture
#define glIsTexture(texture) glatter_glIsTexture((texture))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#ifndef glLightModelf
#define glLightModelf(pname, param) glatter_glLightModelf((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#ifndef glLightModelfv
#define glLightModelfv(pname, params) glatter_glLightModelfv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#ifndef glLightModelx
#define glLightModelx(pname, param) glatter_glLightModelx((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelx, (GLenum pname, GLfixed param))
#ifndef glLightModelxv
#define glLightModelxv(pname, param) glatter_glLightModelxv((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelxv, (GLenum pname, const GLfixed *param))
#ifndef glLightf
#define glLightf(light, pname, param) glatter_glLightf((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#ifndef glLightfv
#define glLightfv(light, pname, params) glatter_glLightfv((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#ifndef glLightx
#define glLightx(light, pname, param) glatter_glLightx((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightx, (GLenum light, GLenum pname, GLfixed param))
#ifndef glLightxv
#define glLightxv(light, pname, params) glatter_glLightxv((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightxv, (GLenum light, GLenum pname, const GLfixed *params))
#ifndef glLineWidth
#define glLineWidth(width) glatter_glLineWidth((width))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#ifndef glLineWidthx
#define glLineWidthx(width) glatter_glLineWidthx((width))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidthx, (GLfixed width))
#ifndef glLoadIdentity
#define glLoadIdentity() glatter_glLoadIdentity()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadIdentity, (void))
#ifndef glLoadMatrixf
#define glLoadMatrixf(m) glatter_glLoadMatrixf((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixf, (const GLfloat *m))
#ifndef glLoadMatrixx
#define glLoadMatrixx(m) glatter_glLoadMatrixx((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixx, (const GLfixed *m))
#ifndef glLogicOp
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLogicOp, (GLenum opcode))
#ifndef glMaterialf
#define glMaterialf(face, pname, param) glatter_glMaterialf((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#ifndef glMaterialfv
#define glMaterialfv(face, pname, params) glatter_glMaterialfv((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#ifndef glMaterialx
#define glMaterialx(face, pname, param) glatter_glMaterialx((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialx, (GLenum face, GLenum pname, GLfixed param))
#ifndef glMaterialxv
#define glMaterialxv(face, pname, param) glatter_glMaterialxv((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialxv, (GLenum face, GLenum pname, const GLfixed *param))
#ifndef glMatrixMode
#define glMatrixMode(mode) glatter_glMatrixMode((mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMode, (GLenum mode))
#ifndef glMultMatrixf
#define glMultMatrixf(m) glatter_glMultMatrixf((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixf, (const GLfloat *m))
#ifndef glMultMatrixx
#define glMultMatrixx(m) glatter_glMultMatrixx((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixx, (const GLfixed *m))
#ifndef glMultiTexCoord4f
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f((target), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#ifndef glMultiTexCoord4x
#define glMultiTexCoord4x(texture, s, t, r, q) glatter_glMultiTexCoord4x((texture), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4x, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#ifndef glNormal3f
#define glNormal3f(nx, ny, nz) glatter_glNormal3f((nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#ifndef glNormal3x
#define glNormal3x(nx, ny, nz) glatter_glNormal3x((nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3x, (GLfixed nx, GLfixed ny, GLfixed nz))
#ifndef glNormalPointer
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer((type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const void *pointer))
#ifndef glOrthof
#define glOrthof(l, r, b, t, n, f) glatter_glOrthof((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthof, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#ifndef glOrthox
#define glOrthox(l, r, b, t, n, f) glatter_glOrthox((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthox, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glPixelStorei
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#ifndef glPointParameterf
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#ifndef glPointParameterfv
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#ifndef glPointParameterx
#define glPointParameterx(pname, param) glatter_glPointParameterx((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterx, (GLenum pname, GLfixed param))
#ifndef glPointParameterxv
#define glPointParameterxv(pname, params) glatter_glPointParameterxv((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterxv, (GLenum pname, const GLfixed *params))
#ifndef glPointSize
#define glPointSize(size) glatter_glPointSize((size))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSize, (GLfloat size))
#ifndef glPointSizex
#define glPointSizex(size) glatter_glPointSizex((size))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizex, (GLfixed size))
#ifndef glPolygonOffset
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#ifndef glPolygonOffsetx
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx((factor), (units))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetx, (GLfixed factor, GLfixed units))
#ifndef glPopMatrix
#define glPopMatrix() glatter_glPopMatrix()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPopMatrix, (void))
#ifndef glPushMatrix
#define glPushMatrix() glatter_glPushMatrix()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPushMatrix, (void))
#ifndef glReadPixels
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#ifndef glRotatef
#define glRotatef(angle, x, y, z) glatter_glRotatef((angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#ifndef glRotatex
#define glRotatex(angle, x, y, z) glatter_glRotatex((angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatex, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#ifndef glSampleCoverage
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#ifndef glSampleCoveragex
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex((value), (invert))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoveragex, (GLclampx value, GLboolean invert))
#ifndef glScalef
#define glScalef(x, y, z) glatter_glScalef((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#ifndef glScalex
#define glScalex(x, y, z) glatter_glScalex((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glScalex, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glScissor
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#ifndef glShadeModel
#define glShadeModel(mode) glatter_glShadeModel((mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glShadeModel, (GLenum mode))
#ifndef glStencilFunc
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#ifndef glStencilMask
#define glStencilMask(mask) glatter_glStencilMask((mask))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#ifndef glStencilOp
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#ifndef glTexCoordPointer
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glTexEnvf
#define glTexEnvf(target, pname, param) glatter_glTexEnvf((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#ifndef glTexEnvfv
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glTexEnvi
#define glTexEnvi(target, pname, param) glatter_glTexEnvi((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#ifndef glTexEnviv
#define glTexEnviv(target, pname, params) glatter_glTexEnviv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#ifndef glTexEnvx
#define glTexEnvx(target, pname, param) glatter_glTexEnvx((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvx, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexEnvxv
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvxv, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTexImage2D
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#ifndef glTexParameterf
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#ifndef glTexParameterfv
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#ifndef glTexParameteri
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#ifndef glTexParameteriv
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#ifndef glTexParameterx
#define glTexParameterx(target, pname, param) glatter_glTexParameterx((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterx, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexParameterxv
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterxv, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTexSubImage2D
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#ifndef glTranslatef
#define glTranslatef(x, y, z) glatter_glTranslatef((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#ifndef glTranslatex
#define glTranslatex(x, y, z) glatter_glTranslatex((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatex, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glVertexPointer
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glViewport
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_VERSION_ES_CM_1_0)
#endif // defined(__gles1_gl_h_)
#if defined(__gles1_glext_h_)
#if defined(GL_APPLE_copy_texture_levels)
#ifndef glCopyTextureLevelsAPPLE
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTextureLevelsAPPLE, (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount))
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#ifndef glRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE((target), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleAPPLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glResolveMultisampleFramebufferAPPLE
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glResolveMultisampleFramebufferAPPLE, (void))
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#ifndef glClientWaitSyncAPPLE
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE((sync), (flags), (timeout))
#endif
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#ifndef glDeleteSyncAPPLE
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE((sync))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSyncAPPLE, (GLsync sync))
#ifndef glFenceSyncAPPLE
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE((condition), (flags))
#endif
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSyncAPPLE, (GLenum condition, GLbitfield flags))
#ifndef glGetInteger64vAPPLE
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64vAPPLE, (GLenum pname, GLint64 *params))
#ifndef glGetSyncivAPPLE
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE((sync), (pname), (bufSize), (length), (values))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSyncivAPPLE, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#ifndef glIsSyncAPPLE
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE((sync))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSyncAPPLE, (GLsync sync))
#ifndef glWaitSyncAPPLE
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE((sync), (flags), (timeout))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_debug_marker)
#ifndef glInsertEventMarkerEXT
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT((length), (marker))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#ifndef glPopGroupMarkerEXT
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPopGroupMarkerEXT, (void))
#ifndef glPushGroupMarkerEXT
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT((length), (marker))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#ifndef glDiscardFramebufferEXT
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT((target), (numAttachments), (attachments))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDiscardFramebufferEXT, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_map_buffer_range)
#ifndef glFlushMappedBufferRangeEXT
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT((target), (offset), (length))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length))
#ifndef glMapBufferRangeEXT
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT((target), (offset), (length), (access))
#endif
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#ifndef glMultiDrawArraysEXT
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT((mode), (first), (count), (primcount))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#ifndef glMultiDrawElementsEXT
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT((mode), (count), (type), (indices), (primcount))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT((target), (attachment), (textarget), (texture), (level), (samples))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#ifndef glRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT((target), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_robustness)
#ifndef glGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT()
#endif
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatusEXT, (void))
#ifndef glGetnUniformfvEXT
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfvEXT, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#ifndef glGetnUniformivEXT
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT((program), (location), (bufSize), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformivEXT, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#ifndef glReadnPixelsEXT
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT((x), (y), (width), (height), (format), (type), (bufSize), (data))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixelsEXT, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_texture_storage)
#ifndef glTexStorage1DEXT
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT((target), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage1DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTexStorage2DEXT
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT((target), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTexStorage3DEXT
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT((target), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#ifndef glTextureStorage1DEXT
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT((texture), (target), (levels), (internalformat), (width))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#ifndef glTextureStorage2DEXT
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT((texture), (target), (levels), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#ifndef glTextureStorage3DEXT
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT((texture), (target), (levels), (internalformat), (width), (height), (depth))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_IMG_multisampled_render_to_texture)
#ifndef glFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG((target), (attachment), (textarget), (texture), (level), (samples))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#ifndef glRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG((target), (samples), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleIMG, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_IMG_user_clip_plane)
#ifndef glClipPlanefIMG
#define glClipPlanefIMG(p, eqn) glatter_glClipPlanefIMG((p), (eqn))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanefIMG, (GLenum p, const GLfloat *eqn))
#ifndef glClipPlanexIMG
#define glClipPlanexIMG(p, eqn) glatter_glClipPlanexIMG((p), (eqn))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanexIMG, (GLenum p, const GLfixed *eqn))
#endif // defined(GL_IMG_user_clip_plane)
#if defined(GL_NV_fence)
#ifndef glDeleteFencesNV
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV((n), (fences))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#ifndef glFinishFenceNV
#define glFinishFenceNV(fence) glatter_glFinishFenceNV((fence))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFinishFenceNV, (GLuint fence))
#ifndef glGenFencesNV
#define glGenFencesNV(n, fences) glatter_glGenFencesNV((n), (fences))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#ifndef glGetFenceivNV
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV((fence), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#ifndef glIsFenceNV
#define glIsFenceNV(fence) glatter_glIsFenceNV((fence))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFenceNV, (GLuint fence))
#ifndef glSetFenceNV
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV((fence), (condition))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#ifndef glTestFenceNV
#define glTestFenceNV(fence) glatter_glTestFenceNV((fence))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_OES_EGL_image)
#ifndef glEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES((target), (image))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image))
#ifndef glEGLImageTargetTexture2DOES
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES((target), (image))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image))
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_blend_equation_separate)
#ifndef glBlendEquationSeparateOES
#define glBlendEquationSeparateOES(modeRGB, modeAlpha) glatter_glBlendEquationSeparateOES((modeRGB), (modeAlpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparateOES, (GLenum modeRGB, GLenum modeAlpha))
#endif // defined(GL_OES_blend_equation_separate)
#if defined(GL_OES_blend_func_separate)
#ifndef glBlendFuncSeparateOES
#define glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateOES((srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparateOES, (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#endif // defined(GL_OES_blend_func_separate)
#if defined(GL_OES_blend_subtract)
#ifndef glBlendEquationOES
#define glBlendEquationOES(mode) glatter_glBlendEquationOES((mode))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationOES, (GLenum mode))
#endif // defined(GL_OES_blend_subtract)
#if defined(GL_OES_draw_texture)
#ifndef glDrawTexfOES
#define glDrawTexfOES(x, y, z, width, height) glatter_glDrawTexfOES((x), (y), (z), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexfOES, (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height))
#ifndef glDrawTexfvOES
#define glDrawTexfvOES(coords) glatter_glDrawTexfvOES((coords))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexfvOES, (const GLfloat *coords))
#ifndef glDrawTexiOES
#define glDrawTexiOES(x, y, z, width, height) glatter_glDrawTexiOES((x), (y), (z), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexiOES, (GLint x, GLint y, GLint z, GLint width, GLint height))
#ifndef glDrawTexivOES
#define glDrawTexivOES(coords) glatter_glDrawTexivOES((coords))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexivOES, (const GLint *coords))
#ifndef glDrawTexsOES
#define glDrawTexsOES(x, y, z, width, height) glatter_glDrawTexsOES((x), (y), (z), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexsOES, (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height))
#ifndef glDrawTexsvOES
#define glDrawTexsvOES(coords) glatter_glDrawTexsvOES((coords))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexsvOES, (const GLshort *coords))
#ifndef glDrawTexxOES
#define glDrawTexxOES(x, y, z, width, height) glatter_glDrawTexxOES((x), (y), (z), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexxOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height))
#ifndef glDrawTexxvOES
#define glDrawTexxvOES(coords) glatter_glDrawTexxvOES((coords))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTexxvOES, (const GLfixed *coords))
#endif // defined(GL_OES_draw_texture)
#if defined(GL_OES_fixed_point)
#ifndef glAlphaFuncxOES
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES((func), (ref))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncxOES, (GLenum func, GLfixed ref))
#ifndef glClearColorxOES
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glClearDepthxOES
#define glClearDepthxOES(depth) glatter_glClearDepthxOES((depth))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthxOES, (GLfixed depth))
#ifndef glClipPlanexOES
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanexOES, (GLenum plane, const GLfixed *equation))
#ifndef glColor4xOES
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES((red), (green), (blue), (alpha))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4xOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#ifndef glDepthRangexOES
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES((n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangexOES, (GLfixed n, GLfixed f))
#ifndef glFogxOES
#define glFogxOES(pname, param) glatter_glFogxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogxOES, (GLenum pname, GLfixed param))
#ifndef glFogxvOES
#define glFogxvOES(pname, param) glatter_glFogxvOES((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFogxvOES, (GLenum pname, const GLfixed *param))
#ifndef glFrustumxOES
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glGetClipPlanexOES
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanexOES, (GLenum plane, GLfixed *equation))
#ifndef glGetFixedvOES
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFixedvOES, (GLenum pname, GLfixed *params))
#ifndef glGetLightxvOES
#define glGetLightxvOES(light, pname, params) glatter_glGetLightxvOES((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightxvOES, (GLenum light, GLenum pname, GLfixed *params))
#ifndef glGetMaterialxvOES
#define glGetMaterialxvOES(face, pname, params) glatter_glGetMaterialxvOES((face), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialxvOES, (GLenum face, GLenum pname, GLfixed *params))
#ifndef glGetTexEnvxvOES
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glGetTexGenxvOES
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed *params))
#ifndef glGetTexParameterxvOES
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#ifndef glLightModelxOES
#define glLightModelxOES(pname, param) glatter_glLightModelxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelxOES, (GLenum pname, GLfixed param))
#ifndef glLightModelxvOES
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelxvOES, (GLenum pname, const GLfixed *param))
#ifndef glLightxOES
#define glLightxOES(light, pname, param) glatter_glLightxOES((light), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightxOES, (GLenum light, GLenum pname, GLfixed param))
#ifndef glLightxvOES
#define glLightxvOES(light, pname, params) glatter_glLightxvOES((light), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLightxvOES, (GLenum light, GLenum pname, const GLfixed *params))
#ifndef glLineWidthxOES
#define glLineWidthxOES(width) glatter_glLineWidthxOES((width))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidthxOES, (GLfixed width))
#ifndef glLoadMatrixxOES
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixxOES, (const GLfixed *m))
#ifndef glMaterialxOES
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#ifndef glMaterialxvOES
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES((face), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialxvOES, (GLenum face, GLenum pname, const GLfixed *param))
#ifndef glMultMatrixxOES
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES((m))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixxOES, (const GLfixed *m))
#ifndef glMultiTexCoord4xOES
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES((texture), (s), (t), (r), (q))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#ifndef glNormal3xOES
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES((nx), (ny), (nz))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3xOES, (GLfixed nx, GLfixed ny, GLfixed nz))
#ifndef glOrthoxOES
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthoxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#ifndef glPointParameterxOES
#define glPointParameterxOES(pname, param) glatter_glPointParameterxOES((pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterxOES, (GLenum pname, GLfixed param))
#ifndef glPointParameterxvOES
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES((pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterxvOES, (GLenum pname, const GLfixed *params))
#ifndef glPointSizexOES
#define glPointSizexOES(size) glatter_glPointSizexOES((size))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizexOES, (GLfixed size))
#ifndef glPolygonOffsetxOES
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES((factor), (units))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetxOES, (GLfixed factor, GLfixed units))
#ifndef glRotatexOES
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES((angle), (x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatexOES, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#ifndef glSampleCoveragexOES
#define glSampleCoveragexOES(value, invert) glatter_glSampleCoveragexOES((value), (invert))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoveragexOES, (GLclampx value, GLboolean invert))
#ifndef glScalexOES
#define glScalexOES(x, y, z) glatter_glScalexOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glScalexOES, (GLfixed x, GLfixed y, GLfixed z))
#ifndef glTexEnvxOES
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvxOES, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexEnvxvOES
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTexGenxOES
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES((coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param))
#ifndef glTexGenxvOES
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed *params))
#ifndef glTexParameterxOES
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#ifndef glTexParameterxvOES
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#ifndef glTranslatexOES
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES((x), (y), (z))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatexOES, (GLfixed x, GLfixed y, GLfixed z))
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_framebuffer_object)
#ifndef glBindFramebufferOES
#define glBindFramebufferOES(target, framebuffer) glatter_glBindFramebufferOES((target), (framebuffer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebufferOES, (GLenum target, GLuint framebuffer))
#ifndef glBindRenderbufferOES
#define glBindRenderbufferOES(target, renderbuffer) glatter_glBindRenderbufferOES((target), (renderbuffer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbufferOES, (GLenum target, GLuint renderbuffer))
#ifndef glCheckFramebufferStatusOES
#define glCheckFramebufferStatusOES(target) glatter_glCheckFramebufferStatusOES((target))
#endif
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatusOES, (GLenum target))
#ifndef glDeleteFramebuffersOES
#define glDeleteFramebuffersOES(n, framebuffers) glatter_glDeleteFramebuffersOES((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffersOES, (GLsizei n, const GLuint *framebuffers))
#ifndef glDeleteRenderbuffersOES
#define glDeleteRenderbuffersOES(n, renderbuffers) glatter_glDeleteRenderbuffersOES((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffersOES, (GLsizei n, const GLuint *renderbuffers))
#ifndef glFramebufferRenderbufferOES
#define glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferOES((target), (attachment), (renderbuffertarget), (renderbuffer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbufferOES, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#ifndef glFramebufferTexture2DOES
#define glFramebufferTexture2DOES(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DOES((target), (attachment), (textarget), (texture), (level))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#ifndef glGenFramebuffersOES
#define glGenFramebuffersOES(n, framebuffers) glatter_glGenFramebuffersOES((n), (framebuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffersOES, (GLsizei n, GLuint *framebuffers))
#ifndef glGenRenderbuffersOES
#define glGenRenderbuffersOES(n, renderbuffers) glatter_glGenRenderbuffersOES((n), (renderbuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffersOES, (GLsizei n, GLuint *renderbuffers))
#ifndef glGenerateMipmapOES
#define glGenerateMipmapOES(target) glatter_glGenerateMipmapOES((target))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmapOES, (GLenum target))
#ifndef glGetFramebufferAttachmentParameterivOES
#define glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivOES((target), (attachment), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameterivOES, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#ifndef glGetRenderbufferParameterivOES
#define glGetRenderbufferParameterivOES(target, pname, params) glatter_glGetRenderbufferParameterivOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameterivOES, (GLenum target, GLenum pname, GLint *params))
#ifndef glIsFramebufferOES
#define glIsFramebufferOES(framebuffer) glatter_glIsFramebufferOES((framebuffer))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebufferOES, (GLuint framebuffer))
#ifndef glIsRenderbufferOES
#define glIsRenderbufferOES(renderbuffer) glatter_glIsRenderbufferOES((renderbuffer))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbufferOES, (GLuint renderbuffer))
#ifndef glRenderbufferStorageOES
#define glRenderbufferStorageOES(target, internalformat, width, height) glatter_glRenderbufferStorageOES((target), (internalformat), (width), (height))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageOES, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_OES_framebuffer_object)
#if defined(GL_OES_mapbuffer)
#ifndef glGetBufferPointervOES
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES((target), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointervOES, (GLenum target, GLenum pname, void **params))
#ifndef glMapBufferOES
#define glMapBufferOES(target, access) glatter_glMapBufferOES((target), (access))
#endif
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferOES, (GLenum target, GLenum access))
#ifndef glUnmapBufferOES
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES((target))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBufferOES, (GLenum target))
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_matrix_palette)
#ifndef glCurrentPaletteMatrixOES
#define glCurrentPaletteMatrixOES(matrixpaletteindex) glatter_glCurrentPaletteMatrixOES((matrixpaletteindex))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glCurrentPaletteMatrixOES, (GLuint matrixpaletteindex))
#ifndef glLoadPaletteFromModelViewMatrixOES
#define glLoadPaletteFromModelViewMatrixOES() glatter_glLoadPaletteFromModelViewMatrixOES()
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadPaletteFromModelViewMatrixOES, (void))
#ifndef glMatrixIndexPointerOES
#define glMatrixIndexPointerOES(size, type, stride, pointer) glatter_glMatrixIndexPointerOES((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixIndexPointerOES, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#ifndef glWeightPointerOES
#define glWeightPointerOES(size, type, stride, pointer) glatter_glWeightPointerOES((size), (type), (stride), (pointer))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glWeightPointerOES, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_OES_matrix_palette)
#if defined(GL_OES_query_matrix)
#ifndef glQueryMatrixxOES
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES((mantissa), (exponent))
#endif
GLATTER_UBLOCK(GLbitfield, GL_APIENTRY, glQueryMatrixxOES, (GLfixed *mantissa, GLint *exponent))
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#ifndef glClearDepthfOES
#define glClearDepthfOES(depth) glatter_glClearDepthfOES((depth))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthfOES, (GLclampf depth))
#ifndef glClipPlanefOES
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanefOES, (GLenum plane, const GLfloat *equation))
#ifndef glDepthRangefOES
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES((n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangefOES, (GLclampf n, GLclampf f))
#ifndef glFrustumfOES
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumfOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#ifndef glGetClipPlanefOES
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES((plane), (equation))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanefOES, (GLenum plane, GLfloat *equation))
#ifndef glOrthofOES
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES((l), (r), (b), (t), (n), (f))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthofOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#endif // defined(GL_OES_single_precision)
#if defined(GL_OES_texture_cube_map)
#ifndef glGetTexGenfvOES
#define glGetTexGenfvOES(coord, pname, params) glatter_glGetTexGenfvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexGenfvOES, (GLenum coord, GLenum pname, GLfloat *params))
#ifndef glGetTexGenivOES
#define glGetTexGenivOES(coord, pname, params) glatter_glGetTexGenivOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexGenivOES, (GLenum coord, GLenum pname, GLint *params))
#ifndef glTexGenfOES
#define glTexGenfOES(coord, pname, param) glatter_glTexGenfOES((coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGenfOES, (GLenum coord, GLenum pname, GLfloat param))
#ifndef glTexGenfvOES
#define glTexGenfvOES(coord, pname, params) glatter_glTexGenfvOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGenfvOES, (GLenum coord, GLenum pname, const GLfloat *params))
#ifndef glTexGeniOES
#define glTexGeniOES(coord, pname, param) glatter_glTexGeniOES((coord), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGeniOES, (GLenum coord, GLenum pname, GLint param))
#ifndef glTexGenivOES
#define glTexGenivOES(coord, pname, params) glatter_glTexGenivOES((coord), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glTexGenivOES, (GLenum coord, GLenum pname, const GLint *params))
#endif // defined(GL_OES_texture_cube_map)
#if defined(GL_OES_vertex_array_object)
#ifndef glBindVertexArrayOES
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES((array))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArrayOES, (GLuint array))
#ifndef glDeleteVertexArraysOES
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES((n), (arrays))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArraysOES, (GLsizei n, const GLuint *arrays))
#ifndef glGenVertexArraysOES
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES((n), (arrays))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArraysOES, (GLsizei n, GLuint *arrays))
#ifndef glIsVertexArrayOES
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES((array))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArrayOES, (GLuint array))
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_QCOM_driver_control)
#ifndef glDisableDriverControlQCOM
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM((driverControl))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableDriverControlQCOM, (GLuint driverControl))
#ifndef glEnableDriverControlQCOM
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM((driverControl))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableDriverControlQCOM, (GLuint driverControl))
#ifndef glGetDriverControlStringQCOM
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM((driverControl), (bufSize), (length), (driverControlString))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlStringQCOM, (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString))
#ifndef glGetDriverControlsQCOM
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM((num), (size), (driverControls))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlsQCOM, (GLint *num, GLsizei size, GLuint *driverControls))
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#ifndef glExtGetBufferPointervQCOM
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM((target), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBufferPointervQCOM, (GLenum target, void **params))
#ifndef glExtGetBuffersQCOM
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM((buffers), (maxBuffers), (numBuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBuffersQCOM, (GLuint *buffers, GLint maxBuffers, GLint *numBuffers))
#ifndef glExtGetFramebuffersQCOM
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM((framebuffers), (maxFramebuffers), (numFramebuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetFramebuffersQCOM, (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers))
#ifndef glExtGetRenderbuffersQCOM
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM((renderbuffers), (maxRenderbuffers), (numRenderbuffers))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetRenderbuffersQCOM, (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers))
#ifndef glExtGetTexLevelParameterivQCOM
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM((texture), (face), (level), (pname), (params))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexLevelParameterivQCOM, (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params))
#ifndef glExtGetTexSubImageQCOM
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexSubImageQCOM, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels))
#ifndef glExtGetTexturesQCOM
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM((textures), (maxTextures), (numTextures))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexturesQCOM, (GLuint *textures, GLint maxTextures, GLint *numTextures))
#ifndef glExtTexObjectStateOverrideiQCOM
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM((target), (pname), (param))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtTexObjectStateOverrideiQCOM, (GLenum target, GLenum pname, GLint param))
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#ifndef glExtGetProgramBinarySourceQCOM
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM((program), (shadertype), (source), (length))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramBinarySourceQCOM, (GLuint program, GLenum shadertype, GLchar *source, GLint *length))
#ifndef glExtGetProgramsQCOM
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM((programs), (maxPrograms), (numPrograms))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramsQCOM, (GLuint *programs, GLint maxPrograms, GLint *numPrograms))
#ifndef glExtGetShadersQCOM
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM((shaders), (maxShaders), (numShaders))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetShadersQCOM, (GLuint *shaders, GLint maxShaders, GLint *numShaders))
#ifndef glExtIsProgramBinaryQCOM
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM((program))
#endif
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glExtIsProgramBinaryQCOM, (GLuint program))
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#ifndef glEndTilingQCOM
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM((preserveMask))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTilingQCOM, (GLbitfield preserveMask))
#ifndef glStartTilingQCOM
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM((x), (y), (width), (height), (preserveMask))
#endif
GLATTER_UBLOCK(void, GL_APIENTRY, glStartTilingQCOM, (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask))
#endif // defined(__gles1_glext_h_)
#endif // defined(GL_QCOM_tiled_rendering)
#endif // GLATTER_GL

