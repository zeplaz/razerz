/*
Copyright 2018 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLU
#if defined(__glu_h__)
#if defined(__GLU_H__)
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluBeginCurve, (nobj), (GLUnurbs *nobj))
#define gluBeginCurve_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluBeginPolygon, (tess), (GLUtesselator *tess))
#define gluBeginPolygon_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluBeginSurface, (nobj), (GLUnurbs *nobj))
#define gluBeginSurface_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluBeginTrim, (nobj), (GLUnurbs *nobj))
#define gluBeginTrim_defined
GLATTER_FBLOCK(return, GLU, , int, APIENTRY, gluBuild1DMipmaps, (target, components, width, format, type, data), (GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data))
#define gluBuild1DMipmaps_defined
GLATTER_FBLOCK(return, GLU, , int, APIENTRY, gluBuild2DMipmaps, (target, components, width, height, format, type, data), (GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data))
#define gluBuild2DMipmaps_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluCylinder, (qobj, baseRadius, topRadius, height, slices, stacks), (GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks))
#define gluCylinder_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluDeleteNurbsRenderer, (nobj), (GLUnurbs *nobj))
#define gluDeleteNurbsRenderer_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluDeleteQuadric, (state), (GLUquadric *state))
#define gluDeleteQuadric_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluDeleteTess, (tess), (GLUtesselator *tess))
#define gluDeleteTess_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluDisk, (qobj, innerRadius, outerRadius, slices, loops), (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops))
#define gluDisk_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluEndCurve, (nobj), (GLUnurbs *nobj))
#define gluEndCurve_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluEndPolygon, (tess), (GLUtesselator *tess))
#define gluEndPolygon_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluEndSurface, (nobj), (GLUnurbs *nobj))
#define gluEndSurface_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluEndTrim, (nobj), (GLUnurbs *nobj))
#define gluEndTrim_defined
GLATTER_FBLOCK(return, GLU, , const GLubyte*, APIENTRY, gluErrorString, (errCode), (GLenum errCode))
#define gluErrorString_defined
GLATTER_FBLOCK(return, GLU, , const wchar_t*, APIENTRY, gluErrorUnicodeStringEXT, (errCode), (GLenum errCode))
#define gluErrorUnicodeStringEXT_defined
GLATTER_FBLOCK(return, GLU, , const GLubyte*, APIENTRY, gluGetString, (name), (GLenum name))
#define gluGetString_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluGetTessProperty, (tess, which, value), (GLUtesselator *tess, GLenum which, GLdouble *value))
#define gluGetTessProperty_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluLookAt, (eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz), (GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz))
#define gluLookAt_defined
GLATTER_FBLOCK(return, GLU, , GLUnurbs*, APIENTRY, gluNewNurbsRenderer, (), (void))
#define gluNewNurbsRenderer_defined
GLATTER_FBLOCK(return, GLU, , GLUquadric*, APIENTRY, gluNewQuadric, (), (void))
#define gluNewQuadric_defined
GLATTER_FBLOCK(return, GLU, , GLUtesselator*, APIENTRY, gluNewTess, (), (void))
#define gluNewTess_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluNextContour, (tess, type), (GLUtesselator *tess, GLenum type))
#define gluNextContour_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluNurbsCurve, (nobj, nknots, knot, stride, ctlarray, order, type), (GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type))
#define gluNurbsCurve_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluOrtho2D, (left, right, bottom, top), (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top))
#define gluOrtho2D_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluPartialDisk, (qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle), (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle))
#define gluPartialDisk_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluPerspective, (fovy, aspect, zNear, zFar), (GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar))
#define gluPerspective_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluPickMatrix, (x, y, width, height, viewport), (GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4]))
#define gluPickMatrix_defined
GLATTER_FBLOCK(return, GLU, , int, APIENTRY, gluProject, (objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz), (GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz))
#define gluProject_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluPwlCurve, (nobj, count, array, stride, type), (GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type))
#define gluPwlCurve_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluQuadricCallback, (qobj, which, fn), (GLUquadric *qobj, GLenum which, void (CALLBACK* fn)()))
#define gluQuadricCallback_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluQuadricDrawStyle, (quadObject, drawStyle), (GLUquadric *quadObject, GLenum drawStyle))
#define gluQuadricDrawStyle_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluQuadricNormals, (quadObject, normals), (GLUquadric *quadObject, GLenum normals))
#define gluQuadricNormals_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluQuadricOrientation, (quadObject, orientation), (GLUquadric *quadObject, GLenum orientation))
#define gluQuadricOrientation_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluQuadricTexture, (quadObject, textureCoords), (GLUquadric *quadObject, GLboolean textureCoords))
#define gluQuadricTexture_defined
GLATTER_FBLOCK(return, GLU, , int, APIENTRY, gluScaleImage, (format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout), (GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout))
#define gluScaleImage_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluSphere, (qobj, radius, slices, stacks), (GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks))
#define gluSphere_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessBeginContour, (tess), (GLUtesselator *tess))
#define gluTessBeginContour_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessBeginPolygon, (tess, polygon_data), (GLUtesselator *tess, void *polygon_data))
#define gluTessBeginPolygon_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessCallback, (tess, which, fn), (GLUtesselator *tess, GLenum which, void (CALLBACK *fn)()))
#define gluTessCallback_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessEndContour, (tess), (GLUtesselator *tess))
#define gluTessEndContour_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessEndPolygon, (tess), (GLUtesselator *tess))
#define gluTessEndPolygon_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessNormal, (tess, x, y, z), (GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z))
#define gluTessNormal_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessProperty, (tess, which, value), (GLUtesselator *tess, GLenum which, GLdouble value))
#define gluTessProperty_defined
GLATTER_FBLOCK(, GLU, , void, APIENTRY, gluTessVertex, (tess, coords, data), (GLUtesselator *tess, GLdouble coords[3], void *data))
#define gluTessVertex_defined
GLATTER_FBLOCK(return, GLU, , int, APIENTRY, gluUnProject, (winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz), (GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz))
#define gluUnProject_defined
#endif // defined(__glu_h__)
#endif // defined(__GLU_H__)
#endif // GLATTER_GLU

